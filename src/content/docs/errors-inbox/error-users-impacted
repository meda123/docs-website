---
title: "Tracking users impacted"
[comment]: <> (Is it possible to add a new badge to this section?)
metaDescription: "Start tracking users impacted by each error group."
---

Start tracking user impacted 
In addition to seeing error occurrences (sure, a helpful statistic) now you can see the number of users impacted by an error group. You can even set up incremental alerts based on the number of users impacted! 

### Getting started [#users-impacted]

We recommend following OpenTelemetry’s attribute for user identification, enduser.id. The process of sending custom attributes to New Relic is detailed here. 

### Attributes based on error type [#users-impacted-attributes]
Attributes based on error type
There may be multiple ways to represent an end user. We will first check for enduser.id. We will then use one of the following attributes, in order of priority: 

[comment]: <> (Please present the error information in a table format or another more digestable format)

TransactionError: 1) userID 2) userEmail 
JavascriptError: 1) userId 2) user 3) email 4) session 
MobileCrash: 1) email 2) deviceUuid 
MobileHandledException: 1) deviceUuid 
MobileRequestError: 1) userId 2) username 3) deviceUuid

### Data retention of users impacted [#users-impacted-retention]
Users impacted will be displayed based on are tracked up to a month


## Alerting Based on the User Impact Metric [#users-impacted-alerting]

The User Impacted feature for Errors Inbox allows for generating New Relic Alerts based on the quantity of users impacted by an error. To configure this feature on your own New Relic Organization you’ll need to Determine
* The error producing entities to monitor and alert on
* The alert signal is most valuable for your use case
* What threshold value is going to be immediately valuable to your organization


### Determine entityGuid of an Alerting Service [#users-impacted-entityGUID]
In general, alerts can be created based on any NRQL signal. For this tutorial we will be alerting entities for users impacted by error instances. If the entity you want to alert on is an APM service, select “APM & Services” in the navigation bar, then select the service you want to alert on. This service’s entityGuid can be found by clicking the Metadata & Tags field.
[comment]: <> (ADD image)

Selecting the metadata & fields view will open the Metadata & Tags modal, where the Entity guid can be copied.
[comment]: <> (ADD image)

Entities exist on (but are not limited to) all error producing sources, as well as on workloads.
See also: What is an entity?

### Determine a signal which encapsulates Users Impacted [#users-impacted-signal]
To create an NRQL signal which encapsulates users impacted, first determine which service(s) you want to include in your alert, and get their entityGuid(s).

Once the entityGuid(s) are determined, go to the query builder, and insert the below NRQL string. 
```
SELECT uniqueCount(newrelic.error.group.user_impact) FROM Metric WHERE metricName='newrelic.error.group.user_impact' AND entity.guid in(entityGuid1, entityGuid2, …) FACET error.group.guid
```
Replace entity.guid with the guid(s) of services you want to alert on.

This query represents the count of unique users impacted by an error instance produced by the services whose entityGuids were provided. In the next section we will define a threshold value, which, if violated, will trigger an alert. 
[comment]: <> (ADD image)

Graphing this data in the NRQL string builder will give you an opportunity to adjust your query string if desired. Once you have the string which produces the signal you want to alert on, go to the Alerts & AI product and create a new policy and alert condition.

### Create NRQL alert based on Users Impacted Metric [#users-impacted-createNRQL]

To create an alert based on the number of users impacted at your instrumented services, you will need to create a New Relic Query Language (NRQL) alert condition. Follow the steps outlined at https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-conditions/create-nrql-alert-conditions/ and for the NRQL signal copy and past the NRQL string for the Users Impacted metric which was built in the prior section.

Within the Alert condition building interface one can define thresholds which trigger the condition. Violations of the threshold limits are highlighted, and will help you determine the best threshold for your particular use case. The ideal threshold varies by use case, but a good starting value will be the smallest value and violation duration which does not trigger an alert. 

By scrolling down and selecting “Save condition” the alert policy will be created and enabled with default settings. For more information on configuring alerts see https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-policies/create-edit-or-find-alert-policy.
[comment]: <> (ADD image)

Note that the NRQL string being used is faceted by error group, meaning that if any error group exceeds the threshold value for the violation duration, it will trigger an alert. It may be more appropriate for your use case to measure the total users impacted, not just the total users impacted by each error group. A query which encapsulates that well removes the `FACET` clause. 

```
SELECT uniqueCount(newrelic.error.group.user_impact) FROM Metric WHERE metricName='newrelic.error.group.user_impact' AND entity.guid in(entityGuid1, entityGuid2, …) 
```

Also note that the entities used for alerting do not need to be of the same type to exist in one alert condition. Workload entities can be in the same alert signal as as APM and OTel entities. 















